# -*- coding: utf-8 -*-
"""Copy of YOLOv5-Object Detection/AR-CAD

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qxpoW_3QHUUA3mFKyXGq-1F0ruRLr-nY

# Yolov5 dependencies:
"""

# Commented out IPython magic to ensure Python compatibility.
# clone YOLOv5 repository
!git clone https://github.com/ultralytics/yolov5  # clone repo
# %cd yolov5

# install dependencies as necessary
!pip install -r requirements.txt  # install dependencies (ignore errors)
import torch

from IPython.display import Image, clear_output  # to display images
#from utils.google_utils import gdrive_download  # to download models/datasets

# clear_output()
print('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))

# Commented out IPython magic to ensure Python compatibility.
# !DONT RUN THIS CELL

!git clone --recurse-submodules https://github.com/mikel-brostrom/Yolov5_DeepSort_Pytorch.git
# %cd Yolov5_DeepSort_Pytorch
# install dependencies as necessary
!pip install -r requirements.txt  # install dependencies (ignore errors)
import torch

from IPython.display import Image, clear_output  # to display images
#from utils.google_utils import gdrive_download  # to download models/datasets

# clear_output()
print('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))

"""# Dataset

### Tools Dataset
"""

from google.colab import drive
drive.mount('/content/drive')

"""train: /content/drive/MyDrive/AR-CAD PROJECT/Tool Detection Dataset/train
val: /content/drive/MyDrive/AR-CAD PROJECT/Tool Detection Dataset/val
# number of classes
nc: 3

# class names
names: [ 'Screw', 'Screwdriver', 'Hammer' ]

* Parts dataset
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
!curl -L "https://app.roboflow.com/ds/KLkfvpvsR4?key=1YMrqY0nSB" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip

"""* tools dataset

"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
!curl -L "https://app.roboflow.com/ds/O8fTX3NoIU?key=1LtQ2HzTKG" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip

"""### computer parts dataset"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
!curl -L "https://app.roboflow.com/ds/dBwaP2Ud3l?key=pIUngAAtkO" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip

"""# Train

To kick off training we running the training command with the following options:

- **img:** define input image size

- **batch:** determine batch size
- **epochs:** define the number of training epochs. (Note: often, 3000+ are common here!)
- **dataset:**  the path to our yaml file
- **cfg:** specify our model configuration
- **weights:** specify a custom path to weights. (Note: you can download weights from the Ultralytics Google Drive [folder](https://drive.google.com/open?id=1Drs_Aiu7xx6S-ix95f9kNsA6ueKRpN2J))
- **name:** result names
- **nosave:** only save the final checkpoint
- **cache:** cache images for faster training
"""

!python /content/yolov5/train.py --img 416 --batch 16 --epochs 10 --data /content/data.yaml --weights yolov5x.pt --nosave --cache

"""# Visualize

"""

!python /content/yolov5/detect.py --weights /content/yolov5/runs/train/exp2/weights/last.pt --img 416 --conf 0.5 --source /content/GH011578.MP4

!python /content/yolov5/detect.py --weights /content/yolov5/runs/train/exp/weights/best.pt --img 416 --conf 0.25 --source /content/GH011583.MP4

!python /content/yolov5/detect.py --weights /content/yolov5/runs/train/exp/weights/last.pt --img 416 --conf 0.25 --source "/content/drive/MyDrive/AR-CAD PROJECT/Manual Operation Dataset/screw/GOPR3916.MP4"

"""# Alon and Yoni

* hands:
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
!curl -L "https://app.roboflow.com/ds/hrDKzvE6XB?key=a9K8erev7z" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip

""" * Train:"""

!python /content/yolov5/train.py  --img 416 --batch 32 --epochs 100 --data  /content/data.yaml  --weights yolov5x.pt --cache

from google.colab import files
weights = '/content/yolov5/runs/train/exp/weights/last.pt'

files.download(weights)

from google.colab import files
weights = '/content/yolov5/runs/train/exp/weights/best.pt'

files.download(weights)

"""  * Detect:"""

!python /content/yolov5/detect.py --weights /content/drive/MyDrive/best2.pt --img 416 --conf 0.5 --source /content/drive/MyDrive/GOPR8285_1676023731593.MP4

from google.colab import files
proccessed_video1 = '/content/yolov5/runs/detect/exp2/GOPR8284_1673004904501.mp4'
proccessed_video2 = '/content/yolov5/runs/detect/exp/GOPR8269_1672993214930.mp4'

files.download(proccessed_video1)
files.download(proccessed_video2)

"""Track:"""

!git clone https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet.git

!pip install -r requirements.txt  # install dependencies

!pip install lap

!python track.py --yolo-weights best.pt --source both_hands.mov --save-vid